# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: BuildMacOSXWithSonarQube
  displayName: Build for MacOSX With SonarQube
  dependsOn: [] # by specifying an empty array, this stage doesn't depend on the stage before it
  pool:
    vmImage: 'macOS-10.14'
  # variables:
  #    xcodeVersion: "11.2.1"
  steps:
  - task: SonarQubePrepare@4
    inputs:
      SonarQube: 'Peach'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'geoffray-azure-xcodebuild-macosx-test'
      cliProjectName: 'geoffray-azure-xcodebuild-macosx-test'
      cliSources: 'sonar_scanner_example'
      extraProperties: 'sonar.cfamily.build-wrapper-output=build_wrapper_output_directory'
  - bash: |
      curl 'https://peach.sonarsource.com/static/cpp/build-wrapper-macosx-x86.zip' --output build-wrapper-macosx-x86.zip
      unzip build-wrapper-macosx-x86.zip
    displayName: Install buildwrapper
  # - bash: |
  #     set -eu
  #     echo "before"
  #     xcodebuild -version
  #     echo "setting xcode to $(xcodeVersion)"
  #     sudo xcode-select -s /Applications/Xcode_$(xcodeVersion).app/Contents/Developer
  #     echo after
  #     xcodebuild -version
  #   displayName: setup
  - bash: |
      echo '#!/bin/bash' >> mybuild.sh
      echo 'set -euo pipefail' >> mybuild.sh
      # echo 'xcodebuild -project sonar_scanner_example.xcodeproj -scheme sonar_scanner_example -configuration Release build' >> mybuild.sh
      echo 'xcodebuild -project sonar_scanner_example.xcodeproj -configuration Release build' >> mybuild.sh
      cat mybuild.sh
    workingDirectory: .
    displayName: Prepare build
  - bash: |
      xcodebuild -list -workspace sonar_scanner_example.xcodeproj/project.xcworkspace
      build-wrapper-macosx-x86/build-wrapper-macosx-x86 --out-dir build_wrapper_output_directory bash mybuild.sh
    displayName: Compile project in build wrapper
  - task: SonarQubeAnalyze@4

- job: BuildMacOSXWithSonarCloud
  displayName: Build for MacOSX With SonarCloud
  dependsOn: [] # by specifying an empty array, this stage doesn't depend on the stage before it
  pool:
    vmImage: 'macOS-10.14'
  # variables:
  #   CC: clang
  #   CXX: clang++
  #   xcodeVersion: "11.2.1"
  steps:
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'geoffray-adde-sonarsource-github'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'geoffray-azure-xcodebuild-macosx-test'
      cliProjectName: 'geoffray-azure-xcodebuild-macosx-test'
      cliSources: 'sonar_scanner_example'
      extraProperties: 'sonar.cfamily.build-wrapper-output=build_wrapper_output_directory'
  - bash: |
      curl 'https://peach.sonarsource.com/static/cpp/build-wrapper-macosx-x86.zip' --output build-wrapper-macosx-x86.zip
      unzip build-wrapper-macosx-x86.zip
    displayName: Install buildwrapper
  # - bash: |
  #     set -eu
  #     echo "before"
  #     xcodebuild -version
  #     echo "setting xcode to $(xcodeVersion)"
  #     sudo xcode-select -s /Applications/Xcode_$(xcodeVersion).app/Contents/Developer
  #     echo after
  #     xcodebuild -version
  #   displayName: setup
  # - bash: |
  #     xcodebuild -project sonar_scanner_example.xcodeproj clean
  #   workingDirectory: .
  #   displayName: Prepare build
  - bash: |
      # Here the clean before the build seems to break the build-wrapper
      # build-wrapper-macosx-x86/build-wrapper-macosx-x86 --out-dir build_wrapper_output_directory xcodebuild -project sonar_scanner_example.xcodeproj -scheme sonar_scanner_example -configuration Release build
      
      # works: xcodebuild -project sonar_scanner_example.xcodeproj -configuration Release clean
      works: xcodebuild -project sonar_scanner_example.xcodeproj clean
      build-wrapper-macosx-x86/build-wrapper-macosx-x86 --out-dir build_wrapper_output_directory xcodebuild -project sonar_scanner_example.xcodeproj -configuration Release build
    displayName: Compile project in build wrapper
  - task: SonarCloudAnalyze@1